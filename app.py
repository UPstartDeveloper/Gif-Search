from flask import Flask, render_template, request
import request
import os
from dotenv import load_dotenv
load_dotenv()

# Install pypandoc, then install randomwordgenerator library
# Now you have a library to generate random words.
from randomwordgenerator import randomwordgenerator

# Initialize Flask object
app = Flask(__name__)

# lines inspired by https://tenor.com/gifapi/documentation#quickstart-search
TENOR_API_KEY=os.getenv("TENOR_API_KEY")  # stores the API key
limit = 10  # number of search results

@app.route('/')
def index():
    """
    Return home page and activate functionality of buttons.
    Input: URL request
    Output: renders data using index.html
    """
    # Enables random GIFs to show.
    if request.args.get('random'):
        gif_info = []
        # Makes sure 10! Gifs are generated by searching a random word
        while len(gif_info) < 10:
            # Generates a random word to search
            gif_type = randomwordgenerator.generate_random_words(n=1)
            parameters = {
                "q":gif_type,
                "key":api_key,
                "limit":limit
            }
            gif_info = get_gif_info("https://api.tenor.com/v1/random?", parameters)
        return render_template("index.html", gif_info=gif_info, gif_type=gif_type)

    # Enables top trends GIFs to show
    if request.args.get('trending'):
        parameters = {
            "key":api_key,
            "limit":limit
        }
        gif_info = get_gif_info("https://api.tenor.com/v1/trending?", parameters)
        return render_template("index.html", gif_info=gif_info, gif_type="")

    # Enables the page to initially load with 10 Gifs
    parameters = {
        "q":"",
        "key":api_key,
        "limit":limit
    }
    gif_info = get_gif_info("https://api.tenor.com/v1/search?", parameters)
    return render_template("index.html", gif_info=gif_info, gif_type="")


def get_gif_info(api_link, parameters):
    """
    A function to dislay search results.
    Input: gif_type, a string storing user's search query
    Output: a list of dictionaries with corresponding URL links to 10 GIF images
    """
    gif_info = []
    r = requests.get(api_link, parameters)
    if r.status_code == 200:
        # Use response in JSON to get URLs
        json_content = r.json()
        # Getting results list
        json_results = json_content['results']
        # Iterating through result to get specific information
        for json_result in json_results:
            # Appending information to gif_info list of dictionaries
            gif_info.append(
                {'id': json_result['id'],
                 'itemurl': json_result['itemurl'],
                 'url': json_result['media'][0]['mediumgif']['url']})
    return gif_info

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
